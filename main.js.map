{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/js/source/yt.js","webpack:///./src/js/state.js","webpack:///./src/js/index.js","webpack:///./src/js/static.js","webpack:///./src/js/background.js","webpack:///./src/js/player.js","webpack:///./src/js/shortcuts.js"],"sourcesContent":["import { State } from '../state';\n\nexport default class YouTube {\n  #state;\n  #iframe;\n\n  constructor(parent) {\n    this.parent = parent;\n    this.player_el = parent.player_el;\n    this.stream_url = parent.stream.url;\n  }\n\n  setup(){\n    let that = this;\n    this.#iframe = document.createElement(\"iframe\");\n    this.#iframe.setAttribute(\"allow\", \"autoplay; encrypted-media;\");\n    this.#iframe.setAttribute(\"src\", this.stream_url + \"?enablejsapi=1\");\n    this.#iframe.addEventListener(\"load\", function (e) { that.play() })\n    this.player_el.appendChild(this.#iframe);\n    this.#state = State.STOPPED;\n  }\n\n  get state() {\n    return this.#state;\n  }\n\n  post_message(message) {\n    this.#iframe.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"' + message + '\",\"args\":\"\"}', '*')\n  }\n\n  play() {\n    this.post_message('playVideo')\n    this.#state = State.PLAYING;\n  }\n\n  stop() {\n    this.post_message('stopVideo')\n    this.#state = State.STOPPED;\n  }\n\n  destroy() {\n    this.stop()\n    this.#iframe.remove();\n    this.#iframe = undefined;\n    this.#state == undefined;\n  }\n}\n","export const State = {\n  \"STOPPED\": 0,\n  \"PLAYING\": 1\n}\n","import StaticPlayer from \"./static.js\";\n\nlet static_player;\n\n(function () {\n  static_player = new StaticPlayer();\n  static_player.run();\n})();\n","import Player from \"./player.js\";\nimport Background from \"./background.js\";\nimport Shortcuts from \"./shortcuts.js\";\n\nexport default class StaticPlayer {\n  BACKGROUND_VIDEO_EL_ID = \"background-video\"\n  BACKGROUND = Background;\n\n  PLAYER_EL_ID = \"player\";\n  PLAYER = Player;\n\n  SHORTCUTS = Shortcuts;\n\n  #background_video;\n  #background;\n  #player_el;\n  #player;\n  #shortcuts;\n\n\n  get background_video_el (){\n    if (!this.#background_video){\n      this.#background_video = document.getElementById(this.BACKGROUND_VIDEO_EL_ID);\n    }\n    return this.#background_video;\n  }\n\n  get background() {\n    if (!this.#background) {\n      this.#background = new this.BACKGROUND(this);\n    }\n    return this.#background;\n  }\n\n  get player_el (){\n    if (!this.#player_el) {\n      this.#player_el = document.getElementById(this.PLAYER_EL_ID);\n    }\n    return this.#player_el;\n  }\n\n  get player(){\n    if(!this.#player) {\n      this.#player = new this.PLAYER(this);\n    }\n    return this.#player;\n  }\n\n  get shortcuts() {\n    if (!this.#shortcuts) {\n      this.#shortcuts = new this.SHORTCUTS(this);\n    }\n    return this.#shortcuts;\n  }\n\n  run() {\n    this.shortcuts.setup();\n    this.player.start();\n    this.background.start();\n  }\n}\n","export default class BackgroundVideo {\n  BACKGROUND_VIDEO_URL = \"backgrounds.json\"\n\n  constructor (parent) {\n    this.parent = parent;\n    this.background_video_el = parent.background_video_el;\n    this.background_video_el.defaultPlaybackRate = 0.5;\n  }\n\n  get_json(url, callback) {\n    return fetch(url)\n      .then(function(response) {\n        if (!response.ok) {\n          throw new Error(\"HTTP error, status = \" + response.status);\n        }\n        return response.json();\n      })\n      .then(callback.bind(this))\n  }\n\n  handle_backgrounds(backgrounds) {\n    this.backgrounds = backgrounds;\n  }\n\n  random_choice(arr){\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  random_background() {\n    let backgrounds = Object.keys(this.backgrounds).map(function (key) {\n      return obj[key];\n    });\n    return this.random_choice(backgrounds)\n  }\n\n  update_background (background) {\n    this.background_video_el.setAttribute(\"src\", background.url);\n  }\n\n  change() {\n    this.background = this.random_background()\n    this.update_background(this.background);\n    if (this.parent.player.stream) {\n      localStorage.setItem(\"bg-\" + this.parent.player.stream.id, this.background.id);\n    }\n  }\n\n  get_backgrounds() {\n    return this.get_json(this.BACKGROUND_VIDEO_URL, this.handle_backgrounds)\n  }\n\n  start() {\n    this.get_backgrounds()\n      .then(this.change.bind(this))\n  }\n}\n","import YouTube from \"./source/yt.js\"\nimport { State } from './state';\n\nexport default class Player {\n  STREAMS_URL = \"streams.json\"\n\n  SOURCES = {\n    \"www.youtube.com\": YouTube\n  }\n\n  constructor (parent) {\n    this.parent = parent\n    this.player_el = parent.player_el;\n  }\n\n  get_json(url, callback) {\n    return fetch(url)\n      .then(function(response) {\n        if (!response.ok) {\n          throw new Error(\"HTTP error, status = \" + response.status);\n        }\n        return response.json();\n      })\n  }\n\n  handle_streams(streams) {\n    this.streams = streams;\n  }\n\n  random_choice(arr){\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  random_stream() {\n    let streams = Object.keys(this.streams).map(function (key) {\n      return obj[key];\n    });\n    return this.random_choice(streams);\n  }\n\n  change_stream () {\n    this.stream = this.random_stream();\n    if (this.source) {this.source.destroy()}\n\n    const stream_url = new URL(this.stream.url);\n    this.source = new this.SOURCES[stream_url.hostname](this);\n    this.source.setup()\n    localStorage.setItem(\"stream\", this.stream.id);\n  }\n\n  pause() {\n    this.source.stop();\n  }\n\n  play() {\n    this.source.play();\n  }\n\n  toggle() {\n    if (this.source.state == State.PLAYING) {\n      this.source.stop();\n      return;\n    }\n    else if (this.source.state == State.STOPPED) {\n      this.source.play();\n      return;\n    }\n  }\n\n  clear(){\n    if (this.source) {this.source.destroy()};\n  }\n\n  start() {\n    this.get_json(this.STREAMS_URL, this.handle_streams)\n      .then(this.handle_streams.bind(this))\n      .then(this.change_stream.bind(this))\n  }\n}\n","export default class Shortcuts {\n  KEY_MAP = {\n    \"Space\": this.playpause,\n    \"ArrowRight\": this.next_station,\n    \"ArrowLeft\": this.prev_station,\n    \"ArrowDown\": this.change_background,\n    \"ArrowUp\": this.change_background\n  }\n\n  constructor(parent) {\n    this.parent = parent;\n  }\n\n  setup() {\n    const that = this;\n    document.addEventListener(\"keyup\", (e) => {\n      e = e || window.event;\n\n      if (e.code in this.KEY_MAP) {\n        this.KEY_MAP[e.code].call(that, e)\n      }\n    })\n  }\n\n  playpause (e) {\n    this.parent.player.toggle();\n  }\n\n  next_station () {\n    this.parent.player.change_stream()\n  }\n\n  prev_station () {\n    this.parent.player.change_stream()\n  }\n\n  change_background () {\n    this.parent.background.change();\n  }\n}\n"],"names":["YouTube","constructor","parent","this","player_el","stream_url","stream","url","setup","that","document","createElement","setAttribute","addEventListener","e","play","appendChild","post_message","message","contentWindow","postMessage","stop","destroy","remove","undefined","static_player","BACKGROUND_VIDEO_EL_ID","BACKGROUND","BACKGROUND_VIDEO_URL","background_video_el","defaultPlaybackRate","get_json","callback","fetch","then","response","ok","Error","status","json","bind","handle_backgrounds","backgrounds","random_choice","arr","Math","floor","random","length","random_background","Object","keys","map","key","obj","update_background","background","change","player","localStorage","setItem","id","get_backgrounds","start","PLAYER_EL_ID","PLAYER","STREAMS_URL","SOURCES","handle_streams","streams","random_stream","change_stream","source","URL","hostname","pause","toggle","state","clear","SHORTCUTS","KEY_MAP","playpause","next_station","prev_station","change_background","window","event","code","call","getElementById","run","shortcuts"],"sourceRoot":""}